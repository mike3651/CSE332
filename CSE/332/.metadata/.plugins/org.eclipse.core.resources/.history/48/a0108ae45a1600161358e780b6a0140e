import java.util.List;
import java.util.Map;

public class CodingTree {
	/** The message to encode. */
	private String theMessage;
	
	/** The mapping of characters to binary codes. */
	private Map<Character, String> codes;
	
	/** The message encoded. */
	private List<Byte> bits;
	
	/** 
	 * Creates a coding tree with the correct message.
	 * 
	 * @param message The message to be compressed.
	 */
	public CodingTree(String message) {
		theMessage = message;
	}
	
	/**
	 * Private inner class that creates a huffman node.
	 */
	private class CodingNode {
		/** The character that we are dealing with. */
		private char theChar;
		
		/** The frequency of the particular node. */
		private int frequency;
		
		/** Reference to the left child. */
		private CodingNode left;
		
		/** Reference to the right child. */
		private CodingNode right;
		
		/** 
		 * Creates a generic coding node.
		 *
		 * @param theChar The current character.
		 * @param frequency The frequency of this character
		 */
		public CodingNode(char character, int amount) {
			this(character, amount, null, null);
		}
		
		/** 
		 * Creates a generic coding node.
		 *
		 * @param theChar The current character.
		 * @param frequency The frequency of this character
		 * @param theLeft The left subtree
		 * @param theRight The right subtree
		 */
		public CodingNode(char character, int amount, CodingNode theLeft, 
				CodingNode theRight) {
			
		}
	}
	
}
